#compdef tsc
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for tsc (https://www.typescriptlang.org/)
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Phoenix Tsui <xusiyuan841028@gmail.com>
#
# ------------------------------------------------------------------------------


local curcontext="$curcontext" state line _opts ret=1
typeset -A opt_args

_arguments -C \
  '(- 1 *)'{-v,--version}'[Print the compiler\''s version]' \
  '1: :->cmds' \
  '*:: :->args' && ret=0

case $state in
  cmds)
    _values "bower command" \
      "cache[manage bower cache]" \
      "help[display help information about Bower]" \
      "home[opens a package homepage into your favorite browser]" \
      "info[info of a particular package]" \
      "init[interactively create a bower.json file]" \
      "install[install a package locally]" \
      "link[symlink a package folder]" \
      "list[list local packages - and possible updates]" \
      "login[authenticate with GitHub and store credentials]" \
      "lookup[look up a package URL by name]" \
      "prune[removes local extraneous packages]" \
      "register[register a package]" \
      "search[search for a package by name]" \
      "update[update a local package]" \
      "uninstall[remove a local package]" \
      "unregister[remove a package from the registry]" \
      "version[bump a package version]" && ret=0
    _arguments "options1" \
      '(--force)--force[make various commands more forceful]' \
      '(--json)--json[output consumable JSON]' \
      '(--log-level)--log-level[what level of logs to report]' \
      "(--offline)--offline[don't hit the network]" \
      '(--quiet)--quiet[only output important information]' \
      "(--silent)--silent[don't output anything, besides errors]" \
      '(--verbose)--verbose[make output more verbose]' \
      '(--allow-root)--allow-root[allow running commands as root]' \
      '(--version)--version[output Bower version]' \
      '(--no-color)--no-color[disable colors]' && ret=0
    ;;
  args)
    case $line[1] in
      help)
        _values 'commands' \
          'cache' \
          'home' \
          'info' \
          'init' \
          'install' \
          'link' \
          'list' \
          'login' \
          'lookup' \
          'prune' \
          'register' \
          'search' \
          'update' \
          'uninstall' \
          'unregister' \
          'version' && ret=0
        ;;
      (home|info|init|link|lookup|prune|register|search|unregister)
        _arguments \
          '(--help)--help[show help message]' && ret=0
        ;;
      install)
        _arguments \
          '(--force-latest)--force-latest[force latest version on conflict]' \
          '(--help)--help[show help message]' \
          "(--production)--production[don't install project devDependencies]" \
          "(--save)--save[save installed packages into the project's bower.json dependencies]" \
          "(--save-dev)--save-dev[save installed packages into the project's bower.json devDependencies]" && ret=0
        ;;
      list)
        _arguments \
          '(--help)--help[show help message]' \
          '(--paths)--paths[generate a simple JSON source mapping]' \
          '(--relative)--relative[make paths relative to the directory config property, which defaults to bower_components]' && ret=0
        ;;
      login)
        _arguments \
          '(--help)--help[show help message]' \
          '(-t --token)'{-t,--token}'[Pass GitHub auth token (will not prompt for username/password)]' && ret=0
        ;;
      uninstall)
        _arguments \
          '(--help)--help[show help message]' \
          "(--save)--save[save installed packages into the project's bower.json dependencies]" \
          "(--save-dev)--save-dev[save installed packages into the project's bower.json devDependencies]" && ret=0
        ;;
      update)
        _arguments \
          '(--force-latest)--force-latest[force latest version on conflict]' \
          '(--help)--help[show help message]' \
          "(--production)--production[don't install project devDependencies]" && ret=0
        ;;
      version)
        _arguments \
          '(--message)--message[custom git commit and tag message]' && ret=0
        ;;
      exec)
        _normal && ret=0
        ;;
      *)
        _opts=(  $(bower help $line[1] | sed -e '/^  \[-/!d; s/^  \[\(-[^=]*\)=.*/\1/') )
        _opts+=( $(bower help $line[1] | sed -e '/^  -/!d; s/^  \(-.\), \[\(-[^=]*\)=.*/\1 \2/') )
        if [[ $_opts != "" ]]; then
          _values 'option' $_opts && ret=0
        fi
        ;;
    esac
    ;;
esac


# _arguments -s -S \
  # '--ast[generate an abstract syntax tree of nodes]' \
  # '(-b --bare)'{-b,--bare}'[compile without a top-level function wrapper]' \
  # '(-c --compile)'{-c,--compile}'[compile to JavaScript and save as .js files]' \
  # '(-e --eval)'{-e,--eval}'[pass a string from the command line as input]:Inline Script' \
  # '(-i --interactive)'{-i,--interactive}'[run an interactive CoffeeScript REPL]' \
  # '(-j --join)'{-j,--join}'[concatenate the source CoffeeScript before compiling]: :_files -g "*.coffee"' \
  # '(-l --literate)'{-l,--literate}'[treat stdio as literate style coffeescript]' \
  # '(-m --map)'{-m,--map}'[generate source map and save as .js.map files]' \
  # '(-M --inline-map)'{-M,--inline-map}'[generate source map and include it directly in output]' \
  # '(-n --nodes)'{-n,--nodes}'[print out the parse tree that the parser produces]' \
  # '--nodejs[pass options directly to the "node" binary]' \
  # '(-o --output)'{-o,--output}'[set the output directory for compiled JavaScript]: :_files' \
  # '(-p --print --tokens)'{-p,--print}'[print out the compiled JavaScript]' \
  # '(-r --require)'\*{-r,--require}'[require the given module before eval or REPL]:module' \
  # '(-s --stdio)'{-s,--stdio}'[listen for and compile scripts over stdio]' \
  # '(-t --transpile)'{-t,--transpile}'[pipe generated JavaScript through Babel]' \
  # '--all[Show all compiler options]' \
  # '(-h --help)'{-h,--help}'[Print this message]' \
  # '--init[Initializes a TypeScript project and creates a tsconfig.json file]' \
  # '--listFilesOnly[Print names of files that are part of the compilation and then stop processin]' \
  # '(-p --project)'{-p,--project}'[Compile the project given the path to its configuration file, or to a folder with a "tsconfig.json"]' \
  # '--showConfig[Print the final configuration instead of building]' \
  # '(-v --verbose)'{-v,--verbose}'[Enable verbose logging]' \
  # '(-w --watch)'{-w,--watch}'[Watch input files]' \
  # '*:script or directory:_files' && ret=0

  # '(- *)'{-v,--version}'[display the version number]' \
  # '(-p --print --tokens)--tokens[print out the tokens that the lexer/rewriter produce]' \
return ret

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et

